import asyncio
import logging
import re
import uvloop

from pyrogram import Client, filters, idle
from pyrogram.errors import FloodWait
from pyrogram.types import Message

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
# pip install uvloop Pyrogram[fast]

# –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–≤–æ–∏
API_ID = 26275523  # –í–∞—à API_ID
API_HASH = '0c05510640d083029f687cee75f252e3'  # –í–∞—à API_HASH

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º uvloop (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
try:
    import uvloop
    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
except ImportError:
    logger.warning("uvloop –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π asyncio.")

# –£–∫–∞–∑—ã–≤–∞–µ–º workers –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
app = Client("my_account", api_id=API_ID, api_hash=API_HASH, workers=4)

owner_id = 6065764233  # –í–∞—à user ID


@app.on_message(filters.command("dice") & filters.user(owner_id))
async def dicecmd(client: Client, message: Message):
    args = message.text.split()[1:]

    match = re.match(r"\.dice (\d+) (\d+) (\d+) (-?\d+)", message.text)
    if match:
        values = [int(match.group(i)) for i in range(1, 4)]
        chat_id = int(match.group(4))
        for value in values:
            if not (1 <= value <= 6):
                await message.reply_text("–ó–Ω–∞—á–µ–Ω–∏—è –∫—É–±–∏–∫–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 6.")
                return

        try:
            tasks = [roll_dice_until(client, chat_id, value) for value in values]
            await asyncio.gather(*tasks)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            return

    elif len(args) < 2:
        await message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `.dice –∑–Ω–∞—á–µ–Ω–∏–µ chat_id [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]` –∏–ª–∏ `.dice –∑–Ω–∞—á–µ–Ω–∏–µ1 –∑–Ω–∞—á–µ–Ω–∏–µ2 –∑–Ω–∞—á–µ–Ω–∏–µ3 chat_id`")
        return

    else:
        try:
            target_value = int(args[0])
            chat_id = int(args[1])
            count = int(args[2]) if len(args) > 2 else 1
        except ValueError:
            await message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ, chat_id –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
            return

        if not (1 <= target_value <= 6):
            await message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 6.")
            return

        tasks = [roll_dice_until(client, chat_id, target_value) for _ in range(count)]
        await asyncio.gather(*tasks)



async def roll_dice_until(client: Client, chat_id: int, target_value: int):
    while True:
        try:
            msg = await client.send_dice(chat_id, emoji="üé≤")
            if msg.dice.value == target_value:
                return
            try:
                await msg.delete()
            except:
                pass  # –ò–Ω–æ–≥–¥–∞ –Ω–µ —É–¥–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
        except FloodWait as e:
            await asyncio.sleep(e.x + 1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")


async def main():
    await app.start()
    logger.info("Userbot started.")
    await idle()


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
