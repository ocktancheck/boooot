import asyncio
import logging
import re
from telethon import TelegramClient, events, types
from telethon.tl.types import InputMediaDice

API_ID = 26275523
API_HASH = '0c05510640d083029f687cee75f252e3'
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

client = TelegramClient('userbot', API_ID, API_HASH)


async def dicecmd(event):
    args = event.text.split()[1:]

    match = re.match(r"\.dice (\d+) (\d+) (\d+) (-?\d+)", event.text)  # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
    if match:
        values = [int(match.group(i)) for i in range(1, 4)]
        chat_id = int(match.group(4))
        for value in values:
            if not (1 <= value <= 6):
                await event.reply("–ó–Ω–∞—á–µ–Ω–∏—è –∫—É–±–∏–∫–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 6.")
                return
        try:
            for value in values:
                while True:
                    message = await client.send_message(chat_id, file=InputMediaDice("üé≤"))
                    rolled_value = message.media.value
                    if rolled_value != value:
                        await message.delete()
                    else:
                        break
        except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞: {e}")
                await event.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                return


    elif len(args) < 2:
        await event.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `.dice –∑–Ω–∞—á–µ–Ω–∏–µ chat_id [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]` –∏–ª–∏ `.dice –∑–Ω–∞—á–µ–Ω–∏–µ1 –∑–Ω–∞—á–µ–Ω–∏–µ2 –∑–Ω–∞—á–µ–Ω–∏–µ3 chat_id`")
        return

    else: # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞
        try:
            target_value = int(args[0])
            chat_id = int(args[1])
            count = int(args[2]) if len(args) > 2 else 1
        except ValueError:
            await event.reply("–ó–Ω–∞—á–µ–Ω–∏–µ, chat_id –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
            return

        if not (1 <= target_value <= 6):
            await event.reply("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 6.")
            return

        for _ in range(count):
            while True:
                try:
                    message = await client.send_message(chat_id, file=InputMediaDice("üé≤"))
                    rolled_value = message.media.value
                    if rolled_value != target_value:
                        await message.delete()
                    else:
                        break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞: {e}")
                    await event.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                    return




async def is_owner(event):
    owner_id = 6065764233
    return str(event.sender_id) == str(owner_id)


@client.on(events.NewMessage(pattern=r'\.dice'))
async def handle_dice(event):
    if await is_owner(event):
        await dicecmd(event)
    else:
        await event.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")


async def main():
    await client.start()
    logger.info("Userbot started.")
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())